/**
 * generated by Xtext 2.36.0
 */
package org.xtext.browserautomation.mydsl.browserTest.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.browserautomation.mydsl.browserTest.BrowserTestPackage;
import org.xtext.browserautomation.mydsl.browserTest.Property;
import org.xtext.browserautomation.mydsl.browserTest.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getContent <em>Content</em>}</li>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getLabel <em>Label</em>}</li>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getAlt <em>Alt</em>}</li>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getSubProperties <em>Sub Properties</em>}</li>
 *   <li>{@link org.xtext.browserautomation.mydsl.browserTest.impl.PropertyImpl#getChild <em>Child</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyImpl extends MinimalEObjectImpl.Container implements Property
{
  /**
   * The default value of the '{@link #getContent() <em>Content</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContent()
   * @generated
   * @ordered
   */
  protected static final String CONTENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getContent() <em>Content</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContent()
   * @generated
   * @ordered
   */
  protected String content = CONTENT_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final Type TYPE_EDEFAULT = Type.LINK;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected Type type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getLabel() <em>Label</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected static final String LABEL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLabel() <em>Label</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected String label = LABEL_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getAlt() <em>Alt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlt()
   * @generated
   * @ordered
   */
  protected static final String ALT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAlt() <em>Alt</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlt()
   * @generated
   * @ordered
   */
  protected String alt = ALT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSubProperties() <em>Sub Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubProperties()
   * @generated
   * @ordered
   */
  protected EList<Property> subProperties;

  /**
   * The default value of the '{@link #getChild() <em>Child</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChild()
   * @generated
   * @ordered
   */
  protected static final int CHILD_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getChild() <em>Child</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChild()
   * @generated
   * @ordered
   */
  protected int child = CHILD_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BrowserTestPackage.Literals.PROPERTY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getContent()
  {
    return content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContent(String newContent)
  {
    String oldContent = content;
    content = newContent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrowserTestPackage.PROPERTY__CONTENT, oldContent, content));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(Type newType)
  {
    Type oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrowserTestPackage.PROPERTY__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLabel()
  {
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabel(String newLabel)
  {
    String oldLabel = label;
    label = newLabel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrowserTestPackage.PROPERTY__LABEL, oldLabel, label));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrowserTestPackage.PROPERTY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrowserTestPackage.PROPERTY__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAlt()
  {
    return alt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlt(String newAlt)
  {
    String oldAlt = alt;
    alt = newAlt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrowserTestPackage.PROPERTY__ALT, oldAlt, alt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Property> getSubProperties()
  {
    if (subProperties == null)
    {
      subProperties = new EObjectContainmentEList<Property>(Property.class, this, BrowserTestPackage.PROPERTY__SUB_PROPERTIES);
    }
    return subProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getChild()
  {
    return child;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChild(int newChild)
  {
    int oldChild = child;
    child = newChild;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BrowserTestPackage.PROPERTY__CHILD, oldChild, child));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BrowserTestPackage.PROPERTY__SUB_PROPERTIES:
        return ((InternalEList<?>)getSubProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BrowserTestPackage.PROPERTY__CONTENT:
        return getContent();
      case BrowserTestPackage.PROPERTY__TYPE:
        return getType();
      case BrowserTestPackage.PROPERTY__LABEL:
        return getLabel();
      case BrowserTestPackage.PROPERTY__NAME:
        return getName();
      case BrowserTestPackage.PROPERTY__VALUE:
        return getValue();
      case BrowserTestPackage.PROPERTY__ALT:
        return getAlt();
      case BrowserTestPackage.PROPERTY__SUB_PROPERTIES:
        return getSubProperties();
      case BrowserTestPackage.PROPERTY__CHILD:
        return getChild();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BrowserTestPackage.PROPERTY__CONTENT:
        setContent((String)newValue);
        return;
      case BrowserTestPackage.PROPERTY__TYPE:
        setType((Type)newValue);
        return;
      case BrowserTestPackage.PROPERTY__LABEL:
        setLabel((String)newValue);
        return;
      case BrowserTestPackage.PROPERTY__NAME:
        setName((String)newValue);
        return;
      case BrowserTestPackage.PROPERTY__VALUE:
        setValue((String)newValue);
        return;
      case BrowserTestPackage.PROPERTY__ALT:
        setAlt((String)newValue);
        return;
      case BrowserTestPackage.PROPERTY__SUB_PROPERTIES:
        getSubProperties().clear();
        getSubProperties().addAll((Collection<? extends Property>)newValue);
        return;
      case BrowserTestPackage.PROPERTY__CHILD:
        setChild((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BrowserTestPackage.PROPERTY__CONTENT:
        setContent(CONTENT_EDEFAULT);
        return;
      case BrowserTestPackage.PROPERTY__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case BrowserTestPackage.PROPERTY__LABEL:
        setLabel(LABEL_EDEFAULT);
        return;
      case BrowserTestPackage.PROPERTY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BrowserTestPackage.PROPERTY__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case BrowserTestPackage.PROPERTY__ALT:
        setAlt(ALT_EDEFAULT);
        return;
      case BrowserTestPackage.PROPERTY__SUB_PROPERTIES:
        getSubProperties().clear();
        return;
      case BrowserTestPackage.PROPERTY__CHILD:
        setChild(CHILD_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BrowserTestPackage.PROPERTY__CONTENT:
        return CONTENT_EDEFAULT == null ? content != null : !CONTENT_EDEFAULT.equals(content);
      case BrowserTestPackage.PROPERTY__TYPE:
        return type != TYPE_EDEFAULT;
      case BrowserTestPackage.PROPERTY__LABEL:
        return LABEL_EDEFAULT == null ? label != null : !LABEL_EDEFAULT.equals(label);
      case BrowserTestPackage.PROPERTY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BrowserTestPackage.PROPERTY__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
      case BrowserTestPackage.PROPERTY__ALT:
        return ALT_EDEFAULT == null ? alt != null : !ALT_EDEFAULT.equals(alt);
      case BrowserTestPackage.PROPERTY__SUB_PROPERTIES:
        return subProperties != null && !subProperties.isEmpty();
      case BrowserTestPackage.PROPERTY__CHILD:
        return child != CHILD_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (content: ");
    result.append(content);
    result.append(", type: ");
    result.append(type);
    result.append(", label: ");
    result.append(label);
    result.append(", name: ");
    result.append(name);
    result.append(", value: ");
    result.append(value);
    result.append(", alt: ");
    result.append(alt);
    result.append(", child: ");
    result.append(child);
    result.append(')');
    return result.toString();
  }

} //PropertyImpl
