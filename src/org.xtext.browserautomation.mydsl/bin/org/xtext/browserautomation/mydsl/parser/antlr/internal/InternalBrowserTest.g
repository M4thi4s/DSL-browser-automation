/*
 * generated by Xtext 2.36.0
 */
grammar InternalBrowserTest;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.browserautomation.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.browserautomation.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.browserautomation.mydsl.services.BrowserTestGrammarAccess;

}

@parser::members {

 	private BrowserTestGrammarAccess grammarAccess;

    public InternalBrowserTestParser(TokenStream input, BrowserTestGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TestFile";
   	}

   	@Override
   	protected BrowserTestGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTestFile
entryRuleTestFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestFileRule()); }
	iv_ruleTestFile=ruleTestFile
	{ $current=$iv_ruleTestFile.current; }
	EOF;

// Rule TestFile
ruleTestFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTestFileAccess().getTaskTaskParserRuleCall_0());
			}
			lv_task_0_0=ruleTask
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTestFileRule());
				}
				add(
					$current,
					"task",
					lv_task_0_0,
					"org.xtext.browserautomation.mydsl.BrowserTest.Task");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[TASK]'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTASKKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getActionsActionParserRuleCall_2_0());
				}
				lv_actions_2_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					add(
						$current,
						"actions",
						lv_actions_2_0,
						"org.xtext.browserautomation.mydsl.BrowserTest.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionAccess().getGoToParserRuleCall_0());
		}
		this_GoTo_0=ruleGoTo
		{
			$current = $this_GoTo_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getSelectParserRuleCall_1());
		}
		this_Select_1=ruleSelect
		{
			$current = $this_Select_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getActionCommandParserRuleCall_2());
		}
		this_ActionCommand_2=ruleActionCommand
		{
			$current = $this_ActionCommand_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getTestParserRuleCall_3());
		}
		this_Test_3=ruleTest
		{
			$current = $this_Test_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGoTo
entryRuleGoTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoToRule()); }
	iv_ruleGoTo=ruleGoTo
	{ $current=$iv_ruleGoTo.current; }
	EOF;

// Rule GoTo
ruleGoTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[GOTO]'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoToAccess().getGOTOKeyword_0());
		}
		(
			(
				lv_url_1_0=RULE_STRING
				{
					newLeafNode(lv_url_1_0, grammarAccess.getGoToAccess().getUrlSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGoToRule());
					}
					setWithLastConsumed(
						$current,
						"url",
						lv_url_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[SELECT]'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSELECTKeyword_0());
		}
		otherlv_1='$'
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getDollarSignKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSelectAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getPropertiesPropertyParserRuleCall_3_0());
				}
				lv_properties_3_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					add(
						$current,
						"properties",
						lv_properties_3_0,
						"org.xtext.browserautomation.mydsl.BrowserTest.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='[CONTENT]'
			{
				newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getCONTENTKeyword_0_0());
			}
			(
				(
					lv_content_1_0=RULE_STRING
					{
						newLeafNode(lv_content_1_0, grammarAccess.getPropertyAccess().getContentSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"content",
							lv_content_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_2='[TYPE]'
			{
				newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getTYPEKeyword_1_0());
			}
			otherlv_3='$'
			{
				newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getDollarSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyAccess().getTypeTypeEnumRuleCall_1_2_0());
					}
					lv_type_4_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyRule());
						}
						set(
							$current,
							"type",
							lv_type_4_0,
							"org.xtext.browserautomation.mydsl.BrowserTest.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_5='[LABEL]'
			{
				newLeafNode(otherlv_5, grammarAccess.getPropertyAccess().getLABELKeyword_2_0());
			}
			(
				(
					lv_label_6_0=RULE_STRING
					{
						newLeafNode(lv_label_6_0, grammarAccess.getPropertyAccess().getLabelSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"label",
							lv_label_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_7='[NAME]'
			{
				newLeafNode(otherlv_7, grammarAccess.getPropertyAccess().getNAMEKeyword_3_0());
			}
			(
				(
					lv_name_8_0=RULE_STRING
					{
						newLeafNode(lv_name_8_0, grammarAccess.getPropertyAccess().getNameSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_8_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_9='[VALUE]'
			{
				newLeafNode(otherlv_9, grammarAccess.getPropertyAccess().getVALUEKeyword_4_0());
			}
			(
				(
					lv_value_10_0=RULE_STRING
					{
						newLeafNode(lv_value_10_0, grammarAccess.getPropertyAccess().getValueSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_10_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_11='[ALT]'
			{
				newLeafNode(otherlv_11, grammarAccess.getPropertyAccess().getALTKeyword_5_0());
			}
			(
				(
					lv_alt_12_0=RULE_STRING
					{
						newLeafNode(lv_alt_12_0, grammarAccess.getPropertyAccess().getAltSTRINGTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"alt",
							lv_alt_12_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_13='[PARENT]'
			{
				newLeafNode(otherlv_13, grammarAccess.getPropertyAccess().getPARENTKeyword_6_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getPropertyAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyAccess().getSubPropertiesPropertyParserRuleCall_6_2_0());
					}
					lv_subProperties_15_0=ruleProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyRule());
						}
						add(
							$current,
							"subProperties",
							lv_subProperties_15_0,
							"org.xtext.browserautomation.mydsl.BrowserTest.Property");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getPropertyAccess().getRightCurlyBracketKeyword_6_3());
			}
		)
		    |
		(
			otherlv_17='[NTH-CHILD]'
			{
				newLeafNode(otherlv_17, grammarAccess.getPropertyAccess().getNTHCHILDKeyword_7_0());
			}
			(
				(
					lv_child_18_0=RULE_INT
					{
						newLeafNode(lv_child_18_0, grammarAccess.getPropertyAccess().getChildINTTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"child",
							lv_child_18_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleActionCommand
entryRuleActionCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionCommandRule()); }
	iv_ruleActionCommand=ruleActionCommand
	{ $current=$iv_ruleActionCommand.current; }
	EOF;

// Rule ActionCommand
ruleActionCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[ACTION]'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionCommandAccess().getACTIONKeyword_0());
		}
		otherlv_1='$'
		{
			newLeafNode(otherlv_1, grammarAccess.getActionCommandAccess().getDollarSignKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getActionCommandAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionCommandRule());
					}
					addWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getActionCommandAccess().getCommandActionTypeParserRuleCall_3_0());
				}
				lv_command_3_0=ruleActionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_3_0,
						"org.xtext.browserautomation.mydsl.BrowserTest.ActionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActionType
entryRuleActionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionTypeRule()); }
	iv_ruleActionType=ruleActionType
	{ $current=$iv_ruleActionType.current; }
	EOF;

// Rule ActionType
ruleActionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[CLICK]'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionTypeAccess().getCLICKKeyword_0());
		}
		    |
		(
			otherlv_1='[CHECK]'
			{
				newLeafNode(otherlv_1, grammarAccess.getActionTypeAccess().getCHECKKeyword_1_0());
			}
			(
				(
					lv_argument_2_0=RULE_STRING
					{
						newLeafNode(lv_argument_2_0, grammarAccess.getActionTypeAccess().getArgumentSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionTypeRule());
						}
						setWithLastConsumed(
							$current,
							"argument",
							lv_argument_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_3='[SET-TEXT]'
			{
				newLeafNode(otherlv_3, grammarAccess.getActionTypeAccess().getSETTEXTKeyword_2_0());
			}
			(
				(
					lv_argument_4_0=RULE_STRING
					{
						newLeafNode(lv_argument_4_0, grammarAccess.getActionTypeAccess().getArgumentSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionTypeRule());
						}
						setWithLastConsumed(
							$current,
							"argument",
							lv_argument_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_5='[CHOOSE]'
			{
				newLeafNode(otherlv_5, grammarAccess.getActionTypeAccess().getCHOOSEKeyword_3_0());
			}
			(
				(
					lv_argument_6_0=RULE_STRING
					{
						newLeafNode(lv_argument_6_0, grammarAccess.getActionTypeAccess().getArgumentSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionTypeRule());
						}
						setWithLastConsumed(
							$current,
							"argument",
							lv_argument_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	iv_ruleTest=ruleTest
	{ $current=$iv_ruleTest.current; }
	EOF;

// Rule Test
ruleTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[TEST]'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestAccess().getTESTKeyword_0());
		}
		otherlv_1='$'
		{
			newLeafNode(otherlv_1, grammarAccess.getTestAccess().getDollarSignKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTestAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='LINK'
			{
				$current = grammarAccess.getTypeAccess().getLINKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getLINKEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='INPUT'
			{
				$current = grammarAccess.getTypeAccess().getINPUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getINPUTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='TEXT'
			{
				$current = grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getTEXTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='CHECKBOX'
			{
				$current = grammarAccess.getTypeAccess().getCHECKBOXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getCHECKBOXEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='DIV'
			{
				$current = grammarAccess.getTypeAccess().getDIVEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getDIVEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='TITLE'
			{
				$current = grammarAccess.getTypeAccess().getTITLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getTITLEEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
