/*
 * generated by Xtext 2.36.0
 */
package org.xtext.browserautomation.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.browserautomation.mydsl.ide.contentassist.antlr.internal.InternalBrowserTestParser;
import org.xtext.browserautomation.mydsl.services.BrowserTestGrammarAccess;

public class BrowserTestParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BrowserTestGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BrowserTestGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
			builder.put(grammarAccess.getActionTypeAccess().getAlternatives(), "rule__ActionType__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getGoToAccess().getGroup(), "rule__GoTo__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_0(), "rule__Property__Group_0__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_1(), "rule__Property__Group_1__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_2(), "rule__Property__Group_2__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_3(), "rule__Property__Group_3__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_4(), "rule__Property__Group_4__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_5(), "rule__Property__Group_5__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_6(), "rule__Property__Group_6__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_7(), "rule__Property__Group_7__0");
			builder.put(grammarAccess.getActionCommandAccess().getGroup(), "rule__ActionCommand__Group__0");
			builder.put(grammarAccess.getActionTypeAccess().getGroup_1(), "rule__ActionType__Group_1__0");
			builder.put(grammarAccess.getActionTypeAccess().getGroup_2(), "rule__ActionType__Group_2__0");
			builder.put(grammarAccess.getActionTypeAccess().getGroup_3(), "rule__ActionType__Group_3__0");
			builder.put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
			builder.put(grammarAccess.getTestFileAccess().getTaskAssignment(), "rule__TestFile__TaskAssignment");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getActionsAssignment_2(), "rule__Task__ActionsAssignment_2");
			builder.put(grammarAccess.getGoToAccess().getUrlAssignment_1(), "rule__GoTo__UrlAssignment_1");
			builder.put(grammarAccess.getSelectAccess().getNameAssignment_2(), "rule__Select__NameAssignment_2");
			builder.put(grammarAccess.getSelectAccess().getPropertiesAssignment_3(), "rule__Select__PropertiesAssignment_3");
			builder.put(grammarAccess.getPropertyAccess().getContentAssignment_0_1(), "rule__Property__ContentAssignment_0_1");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_1_2(), "rule__Property__TypeAssignment_1_2");
			builder.put(grammarAccess.getPropertyAccess().getLabelAssignment_2_1(), "rule__Property__LabelAssignment_2_1");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_3_1(), "rule__Property__NameAssignment_3_1");
			builder.put(grammarAccess.getPropertyAccess().getValueAssignment_4_1(), "rule__Property__ValueAssignment_4_1");
			builder.put(grammarAccess.getPropertyAccess().getAltAssignment_5_1(), "rule__Property__AltAssignment_5_1");
			builder.put(grammarAccess.getPropertyAccess().getSubPropertiesAssignment_6_2(), "rule__Property__SubPropertiesAssignment_6_2");
			builder.put(grammarAccess.getPropertyAccess().getChildAssignment_7_1(), "rule__Property__ChildAssignment_7_1");
			builder.put(grammarAccess.getActionCommandAccess().getNameAssignment_2(), "rule__ActionCommand__NameAssignment_2");
			builder.put(grammarAccess.getActionCommandAccess().getCommandAssignment_3(), "rule__ActionCommand__CommandAssignment_3");
			builder.put(grammarAccess.getActionTypeAccess().getArgumentAssignment_1_1(), "rule__ActionType__ArgumentAssignment_1_1");
			builder.put(grammarAccess.getActionTypeAccess().getArgumentAssignment_2_1(), "rule__ActionType__ArgumentAssignment_2_1");
			builder.put(grammarAccess.getActionTypeAccess().getArgumentAssignment_3_1(), "rule__ActionType__ArgumentAssignment_3_1");
			builder.put(grammarAccess.getTestAccess().getNameAssignment_2(), "rule__Test__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BrowserTestGrammarAccess grammarAccess;

	@Override
	protected InternalBrowserTestParser createParser() {
		InternalBrowserTestParser result = new InternalBrowserTestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BrowserTestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BrowserTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
